/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VoucherKernelInterface extends ethers.utils.Interface {
  functions: {
    "MASK_NF_INDEX()": FunctionFragment;
    "MASK_TYPE()": FunctionFragment;
    "TYPE_NF_BIT()": FunctionFragment;
    "bosonRouterAddress()": FunctionFragment;
    "burnSupplyOnPause(address,uint256,uint256)": FunctionFragment;
    "cancelFaultPeriod()": FunctionFragment;
    "cancelOrFault(uint256,address)": FunctionFragment;
    "cancelOrFaultVoucherSet(uint256,address)": FunctionFragment;
    "cashierAddress()": FunctionFragment;
    "complain(uint256,address)": FunctionFragment;
    "complainPeriod()": FunctionFragment;
    "createPaymentMethod(uint256,uint8,address,address)": FunctionFragment;
    "createTokenSupplyID(address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "fillOrder(uint256,address,address,uint8,uint256)": FunctionFragment;
    "getBuyerOrderCosts(uint256)": FunctionFragment;
    "getIdSupplyFromVoucher(uint256)": FunctionFragment;
    "getOrderCosts(uint256)": FunctionFragment;
    "getPromiseIdFromVoucherId(uint256)": FunctionFragment;
    "getPromiseKey(uint256)": FunctionFragment;
    "getRemQtyForSupply(uint256,address)": FunctionFragment;
    "getSellerDeposit(uint256)": FunctionFragment;
    "getSupplyHolder(uint256)": FunctionFragment;
    "getVoucherDepositToken(uint256)": FunctionFragment;
    "getVoucherHolder(uint256)": FunctionFragment;
    "getVoucherPaymentMethod(uint256)": FunctionFragment;
    "getVoucherPriceToken(uint256)": FunctionFragment;
    "getVoucherStatus(uint256)": FunctionFragment;
    "isInValidityPeriod(uint256)": FunctionFragment;
    "isVoucherTransferable(uint256)": FunctionFragment;
    "ordersPromise(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "paymentDetails(uint256)": FunctionFragment;
    "promiseKeys(uint256)": FunctionFragment;
    "promises(bytes32)": FunctionFragment;
    "redeem(uint256,address)": FunctionFragment;
    "refund(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBosonRouterAddress(address)": FunctionFragment;
    "setCancelFaultPeriod(uint256)": FunctionFragment;
    "setCashierAddress(address)": FunctionFragment;
    "setComplainPeriod(uint256)": FunctionFragment;
    "setDepositsReleased(uint256)": FunctionFragment;
    "setPaymentReleased(uint256)": FunctionFragment;
    "setSupplyHolderOnTransfer(uint256,address)": FunctionFragment;
    "tokenNonces(address)": FunctionFragment;
    "tokensContract()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "triggerExpiration(uint256)": FunctionFragment;
    "triggerFinalizeVoucher(uint256)": FunctionFragment;
    "typeCounters(uint256)": FunctionFragment;
    "typeId()": FunctionFragment;
    "unpause()": FunctionFragment;
    "vouchersStatus(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MASK_NF_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MASK_TYPE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TYPE_NF_BIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bosonRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnSupplyOnPause",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelFaultPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrFault",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrFaultVoucherSet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cashierAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "complain",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "complainPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPaymentMethod",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenSupplyID",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerOrderCosts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdSupplyFromVoucher",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderCosts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPromiseIdFromVoucherId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPromiseKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemQtyForSupply",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyHolder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherDepositToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherHolder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherPaymentMethod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherPriceToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInValidityPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoucherTransferable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ordersPromise",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "promiseKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "promises", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBosonRouterAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCancelFaultPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCashierAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setComplainPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositsReleased",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentReleased",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyHolderOnTransfer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "tokenNonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokensContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerExpiration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerFinalizeVoucher",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "typeCounters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "typeId", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vouchersStatus",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MASK_NF_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MASK_TYPE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TYPE_NF_BIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bosonRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnSupplyOnPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelFaultPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrFault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrFaultVoucherSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cashierAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "complain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "complainPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPaymentMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenSupplyID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerOrderCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdSupplyFromVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPromiseIdFromVoucherId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPromiseKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemQtyForSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellerDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherDepositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherPaymentMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherPriceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInValidityPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoucherTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ordersPromise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "promiseKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "promises", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBosonRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCancelFaultPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCashierAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setComplainPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositsReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyHolderOnTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerFinalizeVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeCounters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "typeId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vouchersStatus",
    data: BytesLike
  ): Result;

  events: {
    "LogBosonRouterSet(address,address)": EventFragment;
    "LogCancelFaultPeriodChanged(uint256,address)": EventFragment;
    "LogCashierSet(address,address)": EventFragment;
    "LogComplainPeriodChanged(uint256,address)": EventFragment;
    "LogExpirationTriggered(uint256,address)": EventFragment;
    "LogFinalizeVoucher(uint256,address)": EventFragment;
    "LogFundsReleased(uint256,uint8)": EventFragment;
    "LogPromiseCreated(bytes32,uint256,address,uint256,uint256,uint256)": EventFragment;
    "LogVoucherComplain(uint256)": EventFragment;
    "LogVoucherDelivered(uint256,uint256,address,address,bytes32,uint256)": EventFragment;
    "LogVoucherFaultCancel(uint256)": EventFragment;
    "LogVoucherRedeemed(uint256,address,bytes32)": EventFragment;
    "LogVoucherRefunded(uint256)": EventFragment;
    "LogVoucherSetFaultCancel(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBosonRouterSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogCancelFaultPeriodChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCashierSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComplainPeriodChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExpirationTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFinalizeVoucher"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFundsReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPromiseCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVoucherComplain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVoucherDelivered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVoucherFaultCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVoucherRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVoucherRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVoucherSetFaultCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class VoucherKernel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VoucherKernelInterface;

  functions: {
    MASK_NF_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    MASK_TYPE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TYPE_NF_BIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    bosonRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    burnSupplyOnPause(
      _issuer: string,
      _tokenIdSupply: BigNumberish,
      _qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelFaultPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelOrFault(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrFaultVoucherSet(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cashierAddress(overrides?: CallOverrides): Promise<[string]>;

    complain(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    complainPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPaymentMethod(
      _tokenIdSupply: BigNumberish,
      _paymentMethod: BigNumberish,
      _tokenPrice: string,
      _tokenDeposits: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTokenSupplyID(
      _seller: string,
      _validFrom: BigNumberish,
      _validTo: BigNumberish,
      _price: BigNumberish,
      _depositSe: BigNumberish,
      _depositBu: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrder(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      _holder: string,
      _paymentMethod: BigNumberish,
      _correlationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBuyerOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getIdSupplyFromVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getPromiseIdFromVoucherId(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPromiseKey(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRemQtyForSupply(
      _tokenSupplyId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellerDeposit(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSupplyHolder(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoucherDepositToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoucherHolder(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoucherPaymentMethod(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVoucherPriceToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoucherStatus(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, boolean, boolean]>;

    isInValidityPeriod(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVoucherTransferable(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ordersPromise(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    paymentDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        paymentMethod: number;
        addressTokenPrice: string;
        addressTokenDeposits: string;
      }
    >;

    promiseKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    promises(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        promiseId: string;
        nonce: BigNumber;
        seller: string;
        validFrom: BigNumber;
        validTo: BigNumber;
        price: BigNumber;
        depositSe: BigNumber;
        depositBu: BigNumber;
        idx: BigNumber;
      }
    >;

    redeem(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBosonRouterAddress(
      _bosonRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCancelFaultPeriod(
      _cancelFaultPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCashierAddress(
      _cashierAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setComplainPeriod(
      _complainPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositsReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupplyHolderOnTransfer(
      _tokenIdSupply: BigNumberish,
      _newSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenNonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensContract(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    triggerExpiration(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    triggerFinalizeVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    typeCounters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    typeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vouchersStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, boolean, BigNumber, BigNumber] & {
        status: number;
        isPaymentReleased: boolean;
        isDepositsReleased: boolean;
        complainPeriodStart: BigNumber;
        cancelFaultPeriodStart: BigNumber;
      }
    >;
  };

  MASK_NF_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  MASK_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

  TYPE_NF_BIT(overrides?: CallOverrides): Promise<BigNumber>;

  bosonRouterAddress(overrides?: CallOverrides): Promise<string>;

  burnSupplyOnPause(
    _issuer: string,
    _tokenIdSupply: BigNumberish,
    _qty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelFaultPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  cancelOrFault(
    _tokenIdVoucher: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrFaultVoucherSet(
    _tokenIdSupply: BigNumberish,
    _issuer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cashierAddress(overrides?: CallOverrides): Promise<string>;

  complain(
    _tokenIdVoucher: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  complainPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  createPaymentMethod(
    _tokenIdSupply: BigNumberish,
    _paymentMethod: BigNumberish,
    _tokenPrice: string,
    _tokenDeposits: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTokenSupplyID(
    _seller: string,
    _validFrom: BigNumberish,
    _validTo: BigNumberish,
    _price: BigNumberish,
    _depositSe: BigNumberish,
    _depositBu: BigNumberish,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrder(
    _tokenIdSupply: BigNumberish,
    _issuer: string,
    _holder: string,
    _paymentMethod: BigNumberish,
    _correlationId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBuyerOrderCosts(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getIdSupplyFromVoucher(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderCosts(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getPromiseIdFromVoucherId(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPromiseKey(_idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getRemQtyForSupply(
    _tokenSupplyId: BigNumberish,
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellerDeposit(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSupplyHolder(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoucherDepositToken(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoucherHolder(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoucherPaymentMethod(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getVoucherPriceToken(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoucherStatus(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, boolean, boolean]>;

  isInValidityPeriod(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVoucherTransferable(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ordersPromise(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  paymentDetails(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string] & {
      paymentMethod: number;
      addressTokenPrice: string;
      addressTokenDeposits: string;
    }
  >;

  promiseKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  promises(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      promiseId: string;
      nonce: BigNumber;
      seller: string;
      validFrom: BigNumber;
      validTo: BigNumber;
      price: BigNumber;
      depositSe: BigNumber;
      depositBu: BigNumber;
      idx: BigNumber;
    }
  >;

  redeem(
    _tokenIdVoucher: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    _tokenIdVoucher: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBosonRouterAddress(
    _bosonRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCancelFaultPeriod(
    _cancelFaultPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCashierAddress(
    _cashierAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setComplainPeriod(
    _complainPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositsReleased(
    _tokenIdVoucher: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentReleased(
    _tokenIdVoucher: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupplyHolderOnTransfer(
    _tokenIdSupply: BigNumberish,
    _newSeller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokensContract(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  triggerExpiration(
    _tokenIdVoucher: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  triggerFinalizeVoucher(
    _tokenIdVoucher: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  typeCounters(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  typeId(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vouchersStatus(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, boolean, BigNumber, BigNumber] & {
      status: number;
      isPaymentReleased: boolean;
      isDepositsReleased: boolean;
      complainPeriodStart: BigNumber;
      cancelFaultPeriodStart: BigNumber;
    }
  >;

  callStatic: {
    MASK_NF_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    MASK_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    TYPE_NF_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    bosonRouterAddress(overrides?: CallOverrides): Promise<string>;

    burnSupplyOnPause(
      _issuer: string,
      _tokenIdSupply: BigNumberish,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelFaultPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrFault(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrFaultVoucherSet(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cashierAddress(overrides?: CallOverrides): Promise<string>;

    complain(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    complainPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    createPaymentMethod(
      _tokenIdSupply: BigNumberish,
      _paymentMethod: BigNumberish,
      _tokenPrice: string,
      _tokenDeposits: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createTokenSupplyID(
      _seller: string,
      _validFrom: BigNumberish,
      _validTo: BigNumberish,
      _price: BigNumberish,
      _depositSe: BigNumberish,
      _depositBu: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillOrder(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      _holder: string,
      _paymentMethod: BigNumberish,
      _correlationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBuyerOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getIdSupplyFromVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getPromiseIdFromVoucherId(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPromiseKey(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRemQtyForSupply(
      _tokenSupplyId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerDeposit(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyHolder(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoucherDepositToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoucherHolder(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoucherPaymentMethod(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getVoucherPriceToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoucherStatus(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, boolean, boolean]>;

    isInValidityPeriod(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVoucherTransferable(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ordersPromise(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    paymentDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        paymentMethod: number;
        addressTokenPrice: string;
        addressTokenDeposits: string;
      }
    >;

    promiseKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    promises(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        promiseId: string;
        nonce: BigNumber;
        seller: string;
        validFrom: BigNumber;
        validTo: BigNumber;
        price: BigNumber;
        depositSe: BigNumber;
        depositBu: BigNumber;
        idx: BigNumber;
      }
    >;

    redeem(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBosonRouterAddress(
      _bosonRouterAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCancelFaultPeriod(
      _cancelFaultPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCashierAddress(
      _cashierAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setComplainPeriod(
      _complainPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositsReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupplyHolderOnTransfer(
      _tokenIdSupply: BigNumberish,
      _newSeller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokensContract(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerExpiration(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerFinalizeVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    typeCounters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    typeId(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vouchersStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, boolean, BigNumber, BigNumber] & {
        status: number;
        isPaymentReleased: boolean;
        isDepositsReleased: boolean;
        complainPeriodStart: BigNumber;
        cancelFaultPeriodStart: BigNumber;
      }
    >;
  };

  filters: {
    LogBosonRouterSet(
      _newBosonRouter?: null,
      _triggeredBy?: null
    ): TypedEventFilter<
      [string, string],
      { _newBosonRouter: string; _triggeredBy: string }
    >;

    LogCancelFaultPeriodChanged(
      _newCancelFaultPeriod?: null,
      _triggeredBy?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _newCancelFaultPeriod: BigNumber; _triggeredBy: string }
    >;

    LogCashierSet(
      _newCashier?: null,
      _triggeredBy?: null
    ): TypedEventFilter<
      [string, string],
      { _newCashier: string; _triggeredBy: string }
    >;

    LogComplainPeriodChanged(
      _newComplainPeriod?: null,
      _triggeredBy?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _newComplainPeriod: BigNumber; _triggeredBy: string }
    >;

    LogExpirationTriggered(
      _tokenIdVoucher?: null,
      _triggeredBy?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _tokenIdVoucher: BigNumber; _triggeredBy: string }
    >;

    LogFinalizeVoucher(
      _tokenIdVoucher?: null,
      _triggeredBy?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _tokenIdVoucher: BigNumber; _triggeredBy: string }
    >;

    LogFundsReleased(
      _tokenIdVoucher?: null,
      _type?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { _tokenIdVoucher: BigNumber; _type: number }
    >;

    LogPromiseCreated(
      _promiseId?: BytesLike | null,
      _nonce?: BigNumberish | null,
      _seller?: string | null,
      _validFrom?: null,
      _validTo?: null,
      _idx?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        _promiseId: string;
        _nonce: BigNumber;
        _seller: string;
        _validFrom: BigNumber;
        _validTo: BigNumber;
        _idx: BigNumber;
      }
    >;

    LogVoucherComplain(
      _tokenIdVoucher?: null
    ): TypedEventFilter<[BigNumber], { _tokenIdVoucher: BigNumber }>;

    LogVoucherDelivered(
      _tokenIdSupply?: BigNumberish | null,
      _tokenIdVoucher?: null,
      _issuer?: null,
      _holder?: null,
      _promiseId?: null,
      _correlationId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string, string, BigNumber],
      {
        _tokenIdSupply: BigNumber;
        _tokenIdVoucher: BigNumber;
        _issuer: string;
        _holder: string;
        _promiseId: string;
        _correlationId: BigNumber;
      }
    >;

    LogVoucherFaultCancel(
      _tokenIdVoucher?: null
    ): TypedEventFilter<[BigNumber], { _tokenIdVoucher: BigNumber }>;

    LogVoucherRedeemed(
      _tokenIdVoucher?: null,
      _holder?: null,
      _promiseId?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { _tokenIdVoucher: BigNumber; _holder: string; _promiseId: string }
    >;

    LogVoucherRefunded(
      _tokenIdVoucher?: null
    ): TypedEventFilter<[BigNumber], { _tokenIdVoucher: BigNumber }>;

    LogVoucherSetFaultCancel(
      _tokenIdSupply?: null,
      _issuer?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _tokenIdSupply: BigNumber; _issuer: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    MASK_NF_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    MASK_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    TYPE_NF_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    bosonRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    burnSupplyOnPause(
      _issuer: string,
      _tokenIdSupply: BigNumberish,
      _qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelFaultPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrFault(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrFaultVoucherSet(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cashierAddress(overrides?: CallOverrides): Promise<BigNumber>;

    complain(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    complainPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    createPaymentMethod(
      _tokenIdSupply: BigNumberish,
      _paymentMethod: BigNumberish,
      _tokenPrice: string,
      _tokenDeposits: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTokenSupplyID(
      _seller: string,
      _validFrom: BigNumberish,
      _validTo: BigNumberish,
      _price: BigNumberish,
      _depositSe: BigNumberish,
      _depositBu: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrder(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      _holder: string,
      _paymentMethod: BigNumberish,
      _correlationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBuyerOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIdSupplyFromVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromiseIdFromVoucherId(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromiseKey(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemQtyForSupply(
      _tokenSupplyId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerDeposit(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyHolder(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherDepositToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherHolder(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherPaymentMethod(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherPriceToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherStatus(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInValidityPeriod(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVoucherTransferable(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ordersPromise(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    paymentDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    promiseKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    promises(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBosonRouterAddress(
      _bosonRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCancelFaultPeriod(
      _cancelFaultPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCashierAddress(
      _cashierAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setComplainPeriod(
      _complainPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositsReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupplyHolderOnTransfer(
      _tokenIdSupply: BigNumberish,
      _newSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokensContract(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    triggerExpiration(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    triggerFinalizeVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    typeCounters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    typeId(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vouchersStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MASK_NF_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASK_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TYPE_NF_BIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bosonRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnSupplyOnPause(
      _issuer: string,
      _tokenIdSupply: BigNumberish,
      _qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelFaultPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOrFault(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrFaultVoucherSet(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cashierAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    complain(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    complainPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPaymentMethod(
      _tokenIdSupply: BigNumberish,
      _paymentMethod: BigNumberish,
      _tokenPrice: string,
      _tokenDeposits: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTokenSupplyID(
      _seller: string,
      _validFrom: BigNumberish,
      _validTo: BigNumberish,
      _price: BigNumberish,
      _depositSe: BigNumberish,
      _depositBu: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrder(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      _holder: string,
      _paymentMethod: BigNumberish,
      _correlationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBuyerOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIdSupplyFromVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPromiseIdFromVoucherId(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPromiseKey(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemQtyForSupply(
      _tokenSupplyId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellerDeposit(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplyHolder(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherDepositToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherHolder(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherPaymentMethod(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherPriceToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherStatus(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInValidityPeriod(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVoucherTransferable(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ordersPromise(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    promiseKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    promises(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBosonRouterAddress(
      _bosonRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCancelFaultPeriod(
      _cancelFaultPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCashierAddress(
      _cashierAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setComplainPeriod(
      _complainPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositsReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupplyHolderOnTransfer(
      _tokenIdSupply: BigNumberish,
      _newSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    triggerExpiration(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    triggerFinalizeVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    typeCounters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    typeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vouchersStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
