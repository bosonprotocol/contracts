/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CashierInterface extends ethers.utils.Interface {
  functions: {
    "addEscrowAmount(address)": FunctionFragment;
    "addEscrowTokensAmount(address,address,uint256)": FunctionFragment;
    "bosonRouterAddress()": FunctionFragment;
    "c_0x5777ee5b(bytes32)": FunctionFragment;
    "c_0x68e157f6(bytes32)": FunctionFragment;
    "canUnpause()": FunctionFragment;
    "disasterState()": FunctionFragment;
    "escrow(address)": FunctionFragment;
    "escrowTokens(address,address)": FunctionFragment;
    "getEscrowAmount(address)": FunctionFragment;
    "getEscrowTokensAmount(address,address)": FunctionFragment;
    "onERC1155Transfer(address,address,uint256,uint256)": FunctionFragment;
    "onERC721Transfer(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBosonRouterAddress(address)": FunctionFragment;
    "setDisasterState()": FunctionFragment;
    "setTokenContractAddress(address)": FunctionFragment;
    "tokensContractAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "voucherKernel()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawDepositsSe(uint256,uint256,address)": FunctionFragment;
    "withdrawEthOnDisaster()": FunctionFragment;
    "withdrawTokensOnDisaster(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addEscrowAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addEscrowTokensAmount",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bosonRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "c_0x5777ee5b",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "c_0x68e157f6",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disasterState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "escrow", values: [string]): string;
  encodeFunctionData(
    functionFragment: "escrowTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowTokensAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Transfer",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Transfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBosonRouterAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisasterState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voucherKernel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDepositsSe",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEthOnDisaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokensOnDisaster",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEscrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEscrowTokensAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bosonRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "c_0x5777ee5b",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "c_0x68e157f6",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canUnpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disasterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowTokensAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBosonRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisasterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voucherKernel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDepositsSe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEthOnDisaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokensOnDisaster",
    data: BytesLike
  ): Result;

  events: {
    "LogAmountDistribution(uint256,address,uint256,uint8)": EventFragment;
    "LogBosonRouterSet(address,address)": EventFragment;
    "LogDisasterStateSet(bool,address)": EventFragment;
    "LogTokenContractSet(address,address)": EventFragment;
    "LogWithdrawEthOnDisaster(uint256,address)": EventFragment;
    "LogWithdrawTokensOnDisaster(uint256,address,address)": EventFragment;
    "LogWithdrawal(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAmountDistribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBosonRouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDisasterStateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenContractSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawEthOnDisaster"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogWithdrawTokensOnDisaster"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class Cashier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CashierInterface;

  functions: {
    addEscrowAmount(
      _account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addEscrowTokensAmount(
      _token: string,
      _account: string,
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bosonRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    c_0x5777ee5b(
      c__0x5777ee5b: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    c_0x68e157f6(
      c__0x68e157f6: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    canUnpause(overrides?: CallOverrides): Promise<[boolean]>;

    disasterState(overrides?: CallOverrides): Promise<[boolean]>;

    escrow(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    escrowTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEscrowAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEscrowTokensAmount(
      _token: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC1155Transfer(
      _from: string,
      _to: string,
      _tokenSupplyId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Transfer(
      _from: string,
      _to: string,
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBosonRouterAddress(
      _bosonRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisasterState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenContractAddress(
      _tokensContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokensContractAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voucherKernel(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawDepositsSe(
      _tokenIdSupply: BigNumberish,
      _burnedQty: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEthOnDisaster(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokensOnDisaster(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addEscrowAmount(
    _account: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addEscrowTokensAmount(
    _token: string,
    _account: string,
    _newAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bosonRouterAddress(overrides?: CallOverrides): Promise<string>;

  c_0x5777ee5b(
    c__0x5777ee5b: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  c_0x68e157f6(
    c__0x68e157f6: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  canUnpause(overrides?: CallOverrides): Promise<boolean>;

  disasterState(overrides?: CallOverrides): Promise<boolean>;

  escrow(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  escrowTokens(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEscrowAmount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEscrowTokensAmount(
    _token: string,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC1155Transfer(
    _from: string,
    _to: string,
    _tokenSupplyId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Transfer(
    _from: string,
    _to: string,
    _tokenIdVoucher: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBosonRouterAddress(
    _bosonRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDisasterState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenContractAddress(
    _tokensContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokensContractAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voucherKernel(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _tokenIdVoucher: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawDepositsSe(
    _tokenIdSupply: BigNumberish,
    _burnedQty: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEthOnDisaster(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokensOnDisaster(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addEscrowAmount(_account: string, overrides?: CallOverrides): Promise<void>;

    addEscrowTokensAmount(
      _token: string,
      _account: string,
      _newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bosonRouterAddress(overrides?: CallOverrides): Promise<string>;

    c_0x5777ee5b(
      c__0x5777ee5b: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    c_0x68e157f6(
      c__0x68e157f6: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    canUnpause(overrides?: CallOverrides): Promise<boolean>;

    disasterState(overrides?: CallOverrides): Promise<boolean>;

    escrow(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    escrowTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEscrowAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEscrowTokensAmount(
      _token: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Transfer(
      _from: string,
      _to: string,
      _tokenSupplyId: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Transfer(
      _from: string,
      _to: string,
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBosonRouterAddress(
      _bosonRouterAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisasterState(overrides?: CallOverrides): Promise<void>;

    setTokenContractAddress(
      _tokensContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensContractAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    voucherKernel(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawDepositsSe(
      _tokenIdSupply: BigNumberish,
      _burnedQty: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEthOnDisaster(overrides?: CallOverrides): Promise<void>;

    withdrawTokensOnDisaster(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    LogAmountDistribution(
      _tokenIdVoucher?: BigNumberish | null,
      _to?: null,
      _payment?: null,
      _type?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, number],
      {
        _tokenIdVoucher: BigNumber;
        _to: string;
        _payment: BigNumber;
        _type: number;
      }
    >;

    LogBosonRouterSet(
      _newBosonRouter?: null,
      _triggeredBy?: null
    ): TypedEventFilter<
      [string, string],
      { _newBosonRouter: string; _triggeredBy: string }
    >;

    LogDisasterStateSet(
      _disasterState?: null,
      _triggeredBy?: null
    ): TypedEventFilter<
      [boolean, string],
      { _disasterState: boolean; _triggeredBy: string }
    >;

    LogTokenContractSet(
      _newTokenContract?: null,
      _triggeredBy?: null
    ): TypedEventFilter<
      [string, string],
      { _newTokenContract: string; _triggeredBy: string }
    >;

    LogWithdrawEthOnDisaster(
      _amount?: null,
      _triggeredBy?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _amount: BigNumber; _triggeredBy: string }
    >;

    LogWithdrawTokensOnDisaster(
      _amount?: null,
      _tokenAddress?: null,
      _triggeredBy?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { _amount: BigNumber; _tokenAddress: string; _triggeredBy: string }
    >;

    LogWithdrawal(
      _caller?: null,
      _payee?: null,
      _payment?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _caller: string; _payee: string; _payment: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    addEscrowAmount(
      _account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addEscrowTokensAmount(
      _token: string,
      _account: string,
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bosonRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    c_0x5777ee5b(
      c__0x5777ee5b: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    c_0x68e157f6(
      c__0x68e157f6: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canUnpause(overrides?: CallOverrides): Promise<BigNumber>;

    disasterState(overrides?: CallOverrides): Promise<BigNumber>;

    escrow(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    escrowTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEscrowAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEscrowTokensAmount(
      _token: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Transfer(
      _from: string,
      _to: string,
      _tokenSupplyId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Transfer(
      _from: string,
      _to: string,
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBosonRouterAddress(
      _bosonRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDisasterState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenContractAddress(
      _tokensContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokensContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voucherKernel(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawDepositsSe(
      _tokenIdSupply: BigNumberish,
      _burnedQty: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEthOnDisaster(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokensOnDisaster(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addEscrowAmount(
      _account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addEscrowTokensAmount(
      _token: string,
      _account: string,
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bosonRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    c_0x5777ee5b(
      c__0x5777ee5b: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    c_0x68e157f6(
      c__0x68e157f6: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canUnpause(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disasterState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    escrow(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escrowTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEscrowAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEscrowTokensAmount(
      _token: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Transfer(
      _from: string,
      _to: string,
      _tokenSupplyId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Transfer(
      _from: string,
      _to: string,
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBosonRouterAddress(
      _bosonRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDisasterState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenContractAddress(
      _tokensContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokensContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voucherKernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDepositsSe(
      _tokenIdSupply: BigNumberish,
      _burnedQty: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEthOnDisaster(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokensOnDisaster(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
