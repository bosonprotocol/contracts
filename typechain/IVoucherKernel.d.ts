/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IVoucherKernelInterface extends ethers.utils.Interface {
  functions: {
    "burnSupplyOnPause(address,uint256,uint256)": FunctionFragment;
    "cancelOrFault(uint256,address)": FunctionFragment;
    "cancelOrFaultVoucherSet(uint256,address)": FunctionFragment;
    "complain(uint256,address)": FunctionFragment;
    "createPaymentMethod(uint256,uint8,address,address)": FunctionFragment;
    "createTokenSupplyID(address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "fillOrder(uint256,address,address,uint8,uint256)": FunctionFragment;
    "getBuyerOrderCosts(uint256)": FunctionFragment;
    "getIdSupplyFromVoucher(uint256)": FunctionFragment;
    "getOrderCosts(uint256)": FunctionFragment;
    "getPromiseIdFromVoucherId(uint256)": FunctionFragment;
    "getPromiseKey(uint256)": FunctionFragment;
    "getRemQtyForSupply(uint256,address)": FunctionFragment;
    "getSellerDeposit(uint256)": FunctionFragment;
    "getSupplyHolder(uint256)": FunctionFragment;
    "getVoucherDepositToken(uint256)": FunctionFragment;
    "getVoucherHolder(uint256)": FunctionFragment;
    "getVoucherPaymentMethod(uint256)": FunctionFragment;
    "getVoucherPriceToken(uint256)": FunctionFragment;
    "getVoucherStatus(uint256)": FunctionFragment;
    "isInValidityPeriod(uint256)": FunctionFragment;
    "isVoucherTransferable(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "redeem(uint256,address)": FunctionFragment;
    "refund(uint256,address)": FunctionFragment;
    "setCancelFaultPeriod(uint256)": FunctionFragment;
    "setCashierAddress(address)": FunctionFragment;
    "setComplainPeriod(uint256)": FunctionFragment;
    "setDepositsReleased(uint256)": FunctionFragment;
    "setPaymentReleased(uint256)": FunctionFragment;
    "setSupplyHolderOnTransfer(uint256,address)": FunctionFragment;
    "triggerExpiration(uint256)": FunctionFragment;
    "triggerFinalizeVoucher(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnSupplyOnPause",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrFault",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrFaultVoucherSet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "complain",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPaymentMethod",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenSupplyID",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerOrderCosts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdSupplyFromVoucher",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderCosts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPromiseIdFromVoucherId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPromiseKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemQtyForSupply",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyHolder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherDepositToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherHolder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherPaymentMethod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherPriceToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInValidityPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoucherTransferable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCancelFaultPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCashierAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setComplainPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositsReleased",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentReleased",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyHolderOnTransfer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerExpiration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerFinalizeVoucher",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "burnSupplyOnPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrFault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrFaultVoucherSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "complain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPaymentMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenSupplyID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerOrderCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdSupplyFromVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPromiseIdFromVoucherId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPromiseKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemQtyForSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellerDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherDepositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherPaymentMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherPriceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInValidityPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoucherTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCancelFaultPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCashierAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setComplainPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositsReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyHolderOnTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerFinalizeVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {};
}

export class IVoucherKernel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVoucherKernelInterface;

  functions: {
    burnSupplyOnPause(
      _issuer: string,
      _tokenIdSupply: BigNumberish,
      _qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrFault(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrFaultVoucherSet(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    complain(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPaymentMethod(
      _tokenIdSupply: BigNumberish,
      _paymentMethod: BigNumberish,
      _tokenPrice: string,
      _tokenDeposits: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTokenSupplyID(
      _seller: string,
      _validFrom: BigNumberish,
      _validTo: BigNumberish,
      _price: BigNumberish,
      _depositSe: BigNumberish,
      _depositBu: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrder(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      _holder: string,
      _paymentMethod: BigNumberish,
      _correlationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBuyerOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getIdSupplyFromVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getPromiseIdFromVoucherId(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPromiseKey(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRemQtyForSupply(
      _tokenSupplyId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellerDeposit(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSupplyHolder(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoucherDepositToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoucherHolder(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoucherPaymentMethod(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVoucherPriceToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoucherStatus(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, boolean, boolean]>;

    isInValidityPeriod(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVoucherTransferable(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCancelFaultPeriod(
      _cancelFaultPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCashierAddress(
      _cashierAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setComplainPeriod(
      _complainPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositsReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupplyHolderOnTransfer(
      _tokenIdSupply: BigNumberish,
      _newSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    triggerExpiration(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    triggerFinalizeVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnSupplyOnPause(
    _issuer: string,
    _tokenIdSupply: BigNumberish,
    _qty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrFault(
    _tokenIdVoucher: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrFaultVoucherSet(
    _tokenIdSupply: BigNumberish,
    _issuer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  complain(
    _tokenIdVoucher: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPaymentMethod(
    _tokenIdSupply: BigNumberish,
    _paymentMethod: BigNumberish,
    _tokenPrice: string,
    _tokenDeposits: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTokenSupplyID(
    _seller: string,
    _validFrom: BigNumberish,
    _validTo: BigNumberish,
    _price: BigNumberish,
    _depositSe: BigNumberish,
    _depositBu: BigNumberish,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrder(
    _tokenIdSupply: BigNumberish,
    _issuer: string,
    _holder: string,
    _paymentMethod: BigNumberish,
    _correlationId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBuyerOrderCosts(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getIdSupplyFromVoucher(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderCosts(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getPromiseIdFromVoucherId(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPromiseKey(_idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getRemQtyForSupply(
    _tokenSupplyId: BigNumberish,
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellerDeposit(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSupplyHolder(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoucherDepositToken(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoucherHolder(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoucherPaymentMethod(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getVoucherPriceToken(
    _tokenIdSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoucherStatus(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, boolean, boolean]>;

  isInValidityPeriod(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVoucherTransferable(
    _tokenIdVoucher: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _tokenIdVoucher: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    _tokenIdVoucher: BigNumberish,
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCancelFaultPeriod(
    _cancelFaultPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCashierAddress(
    _cashierAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setComplainPeriod(
    _complainPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositsReleased(
    _tokenIdVoucher: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentReleased(
    _tokenIdVoucher: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupplyHolderOnTransfer(
    _tokenIdSupply: BigNumberish,
    _newSeller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  triggerExpiration(
    _tokenIdVoucher: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  triggerFinalizeVoucher(
    _tokenIdVoucher: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnSupplyOnPause(
      _issuer: string,
      _tokenIdSupply: BigNumberish,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrFault(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrFaultVoucherSet(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    complain(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createPaymentMethod(
      _tokenIdSupply: BigNumberish,
      _paymentMethod: BigNumberish,
      _tokenPrice: string,
      _tokenDeposits: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createTokenSupplyID(
      _seller: string,
      _validFrom: BigNumberish,
      _validTo: BigNumberish,
      _price: BigNumberish,
      _depositSe: BigNumberish,
      _depositBu: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillOrder(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      _holder: string,
      _paymentMethod: BigNumberish,
      _correlationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBuyerOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getIdSupplyFromVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getPromiseIdFromVoucherId(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPromiseKey(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRemQtyForSupply(
      _tokenSupplyId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerDeposit(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyHolder(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoucherDepositToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoucherHolder(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoucherPaymentMethod(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getVoucherPriceToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoucherStatus(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, boolean, boolean]>;

    isInValidityPeriod(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVoucherTransferable(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pause(overrides?: CallOverrides): Promise<void>;

    redeem(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCancelFaultPeriod(
      _cancelFaultPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCashierAddress(
      _cashierAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setComplainPeriod(
      _complainPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositsReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupplyHolderOnTransfer(
      _tokenIdSupply: BigNumberish,
      _newSeller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerExpiration(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerFinalizeVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    burnSupplyOnPause(
      _issuer: string,
      _tokenIdSupply: BigNumberish,
      _qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrFault(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrFaultVoucherSet(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    complain(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPaymentMethod(
      _tokenIdSupply: BigNumberish,
      _paymentMethod: BigNumberish,
      _tokenPrice: string,
      _tokenDeposits: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTokenSupplyID(
      _seller: string,
      _validFrom: BigNumberish,
      _validTo: BigNumberish,
      _price: BigNumberish,
      _depositSe: BigNumberish,
      _depositBu: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrder(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      _holder: string,
      _paymentMethod: BigNumberish,
      _correlationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBuyerOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIdSupplyFromVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromiseIdFromVoucherId(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromiseKey(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemQtyForSupply(
      _tokenSupplyId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerDeposit(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyHolder(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherDepositToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherHolder(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherPaymentMethod(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherPriceToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherStatus(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInValidityPeriod(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVoucherTransferable(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCancelFaultPeriod(
      _cancelFaultPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCashierAddress(
      _cashierAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setComplainPeriod(
      _complainPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositsReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupplyHolderOnTransfer(
      _tokenIdSupply: BigNumberish,
      _newSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    triggerExpiration(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    triggerFinalizeVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnSupplyOnPause(
      _issuer: string,
      _tokenIdSupply: BigNumberish,
      _qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrFault(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrFaultVoucherSet(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    complain(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPaymentMethod(
      _tokenIdSupply: BigNumberish,
      _paymentMethod: BigNumberish,
      _tokenPrice: string,
      _tokenDeposits: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTokenSupplyID(
      _seller: string,
      _validFrom: BigNumberish,
      _validTo: BigNumberish,
      _price: BigNumberish,
      _depositSe: BigNumberish,
      _depositBu: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrder(
      _tokenIdSupply: BigNumberish,
      _issuer: string,
      _holder: string,
      _paymentMethod: BigNumberish,
      _correlationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBuyerOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIdSupplyFromVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderCosts(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPromiseIdFromVoucherId(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPromiseKey(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemQtyForSupply(
      _tokenSupplyId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellerDeposit(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplyHolder(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherDepositToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherHolder(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherPaymentMethod(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherPriceToken(
      _tokenIdSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherStatus(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInValidityPeriod(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVoucherTransferable(
      _tokenIdVoucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      _tokenIdVoucher: BigNumberish,
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCancelFaultPeriod(
      _cancelFaultPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCashierAddress(
      _cashierAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setComplainPeriod(
      _complainPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositsReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentReleased(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupplyHolderOnTransfer(
      _tokenIdSupply: BigNumberish,
      _newSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    triggerExpiration(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    triggerFinalizeVoucher(
      _tokenIdVoucher: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
